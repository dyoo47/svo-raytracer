  private void constructOctreeGPU(int maxSize, int curLOD, int maxLOD, int[] pPos, int parentPointer, ByteBuffer voxelData, Renderer.Shader samplerShader){

    int cSize = maxSize >> curLOD;
    if(cSize == 0 || curLOD == maxLOD) return;

    int[] children = {0, 0, 0, 0, 0, 0, 0, 0};
    int[][] cPos = new int[8][3];
    for(int n = 0; n < 8; n++){
      cPos[n][0] = pPos[0] + childOffsets[n][0] * cSize;
      cPos[n][1] = pPos[1] + childOffsets[n][1] * cSize;
      cPos[n][2] = pPos[2] + childOffsets[n][2] * cSize;
    }
    byte leafMask = 0;
    for(int n = 0; n < 8; n++){
      byte first = getVoxel(voxelData, cPos[n][0], cPos[n][1], cPos[n][2]);
      byte value = first;
      boolean leaf = true;
      double startTime = System.currentTimeMillis();
      for(int i = cPos[n][0]; i < cPos[n][0] + cSize; i++){
        //if next LOD is maxLOD, then we can assume all children are leaves.
        if(curLOD + 1 == maxLOD) break;
        for(int j = cPos[n][1]; j < cPos[n][1] + cSize; j++){
          for(int k = cPos[n][2]; k < cPos[n][2] + cSize; k++){
            byte sample = getVoxel(voxelData, i, j, k);
            if(sample != 0){
              value = sample;
            }
            if(sample != first){
              if(first == 0) first = sample;
              value = first;
              leaf = false;
              break;
            }
          }
          if(!leaf) break;
        }
        if(!leaf) break;
      }
      // if(curLOD + 1 != maxLOD){
      //   Renderer renderer = Renderer.getInstance();
      //   int groupSize = cSize / 2;
      //   // System.out.println(cSize/2);
      //   // if(groupSize < 1) System.out.println("something went wrong...");
      //   if(groupSize < 1) groupSize = 1;
      //   // renderer.updateSSBO(4, leafBuffer);
      //   renderer.setUniformInteger(5, first);
      //   renderer.setUniformInteger(6, cPos[n][0]);
      //   renderer.setUniformInteger(7, cPos[n][1]);
      //   renderer.setUniformInteger(8, cPos[n][2]);
      //   renderer.dispatchCompute(samplerShader, groupSize, groupSize, groupSize);
      //   renderer.getSSBO(leafBuffer);
      //   if(leafBuffer.getInt(0) == 1){
      //     leaf = false;
      //   }
      //   value = leafBuffer.get(4); // set random nonzero material in voxel texture
      // }
      leafTime += System.currentTimeMillis() - startTime;
      startTime = System.currentTimeMillis();
      if(leaf) {
        if(cSize == 1){
          int normalX = 0;
          int normalY = 0;
          int normalZ = 0;
          for(int i = cPos[n][0]-1; i <= cPos[n][0]+1; i++){
            if(i < 0 || i >= CHUNK_SIZE) continue;
            for(int j = cPos[n][1]-1; j <= cPos[n][1]+1; j++){
              if(j < 0 || j >= CHUNK_SIZE) continue;
              for(int k = cPos[n][2]-1; k <= cPos[n][2]+1; k++){
                if(k < 0 || k >= CHUNK_SIZE) continue;
                if(getVoxel(voxelData, i, j, k) == 0){
                  normalX += i - cPos[n][0];
                  normalY += j - cPos[n][1];
                  normalZ += k - cPos[n][2];
                }
              }
            }
          }
          normalX = normalX / 2 + 5;
          normalY = normalY / 2 + 5;
          normalZ = normalZ / 2 + 5;
          short packed = (short)(normalX + normalY * 10 + normalZ * 100);
          children[n] = createLeafNode(value, packed);
        }else{ //TODO: Generalized algorithm for voxels of size N>1 needs work.
          int normalX = 0;
          int normalY = 0;
          int normalZ = 0;
          for(int i = cPos[n][0]-1; i <= cPos[n][0]+cSize; i++){
            if(i < 0 || i >= CHUNK_SIZE || i >= cPos[n][0] && i <= cPos[n][0]+cSize-1) continue;
            for(int j = cPos[n][1]-1; j <= cPos[n][1]+cSize; j++){
              if(j < 0 || j >= CHUNK_SIZE || j >= cPos[n][1] && j <= cPos[n][1]+cSize-1) continue;
              for(int k = cPos[n][2]-1; k <= cPos[n][2]+cSize; k++){
                if(k < 0 || k >= CHUNK_SIZE || k >= cPos[n][2] && k <= cPos[n][2]+cSize-1) continue;
                if(getVoxel(voxelData, i, j, k) == 0){
                  normalX += Math.copySign(1, i-cPos[n][0]);
                  normalY += Math.copySign(1, j-cPos[n][1]);
                  normalZ += Math.copySign(1, k-cPos[n][2]);
                }
              }
            }
          }
          float maxParam = 2*(cSize+2)*(cSize+2); //calculating max value of a single normal parameter
          float fnx = normalX / maxParam;
          float fny = normalY / maxParam;
          float fnz = normalZ / maxParam;
          float fnmax = Math.max(Math.abs(fnx), Math.max(Math.abs(fny), Math.abs(fnz)));
          //instead of dividing by fnmax we can multiply fn by a constant then subtract so fnmax = 1.
          normalX = (int)(fnx/fnmax * 9) / 2 + 5;
          normalY = (int)(fny/fnmax * 9) / 2 + 5;
          normalZ = (int)(fnz/fnmax * 9) / 2 + 5;
          short packed = (short)(normalX + normalY * 10 + normalZ * 100);
          children[n] = createLeafNode(value, packed);
        }
      }
      else children[n] = createNode(value);
      if(leaf) leafMask |= (0x01 << n);
      normalTime += System.currentTimeMillis() - startTime;
    }
    setChildPointer(parentPointer, children[0]);
    setLeafMask(parentPointer, leafMask);
    for(int n = 0; n < 8; n++){
      if(getValue(children[n]) != 0 && (leafMask & (0x01 << n)) == 0){
        constructOctreeGPU(maxSize, curLOD + 1, maxLOD, cPos[n], children[n], voxelData, samplerShader);
      }
    }
  }

  public void constructOctree(int maxLOD, int rootPointer){ // <-- runner function for next function
    int maxSize = 1 << maxLOD;
    int[] rootPos = {0, 0, 0};
    createNode((byte) 1); //value shouldn't be read cuz root is never leaf node
    if(maxLOD <= 9){
      VoxelData vData = new VoxelData(size, size, size);
      for(int i=0; i < 8; i++){
        threads[i] = new WorldGenThread("wg-" + i, vData, Constants.CHILD_OFFSETS[i] , origin);
        threads[i].start();
      }
      int i = 0;
      while(i < 8){
        i = 0;
        for(WorldGenThread t : threads){
          if(!t.thread.isAlive()) i++;
        }
      }
      constructOctree(maxSize, 0, -1, rootPos, rootPointer, vData, false);
    }else{
      splitLOD = maxLOD - 9;
      maxSize = 512;
      constructOctree(maxSize, 0, -1, rootPos, rootPointer, null, false);
    }

  }

  private void constructOctree(int maxSize, int curLOD, int maxLOD, int[] pPos, int parentPointer, VoxelData voxelData, boolean split){

    int cSize = maxSize >> curLOD;
    if(cSize == 0 || curLOD == maxLOD) return;

    int[] children = {0, 0, 0, 0, 0, 0, 0, 0};
    int[][] cPos = new int[8][3];
    for(int n = 0; n < 8; n++){
      cPos[n][0] = pPos[0] + childOffsets[n][0] * cSize;
      cPos[n][1] = pPos[1] + childOffsets[n][1] * cSize;
      cPos[n][2] = pPos[2] + childOffsets[n][2] * cSize;
    }
    if(voxelData == null){

      if(curLOD == splitLOD && !split){
        int[] newOrigin = {
          origin[0] + pPos[0]*2,
          origin[1] + pPos[1]*2,
          origin[2] + pPos[2]*2
        };
        pPos[0] = 0;
        pPos[1] = 0;
        pPos[2] = 0;
        voxelData = new VoxelData(1024, 1024, 1024);
        
        for(int i=0; i < 8; i++){
          threads[i] = new WorldGenThread("inner wg", voxelData, Constants.CHILD_OFFSETS[i], newOrigin);
          threads[i].start();
        }
        int i = 0;
        while(i < 8){
          i = 0;
          for(WorldGenThread t : threads){
            if(!t.thread.isAlive()) i++;
          }
        }
        constructOctree(maxSize, 0, maxLOD, pPos, parentPointer, voxelData, true);
        return;
      }else{
        for(int i = 0; i < 8; i++){
          children[i] = createNode((byte) 1);
        }
        setChildPointer(parentPointer, children[0]);
        for(int i = 0; i < 8; i++){
          constructOctree(maxSize, curLOD + 1, maxLOD, cPos[i], children[i], voxelData, split);
        }
        return;
      }
    }
    byte leafMask = 0;
    for(int n = 0; n < 8; n++){
      byte first = voxelData.get(cPos[n][0], cPos[n][1], cPos[n][2]);
      byte value = first;
      boolean leaf = true;
      for(int i = cPos[n][0]; i < cPos[n][0] + cSize; i++){
        //if next LOD is maxLOD, then we can assume all children are leaves.
        if(curLOD + 1 == maxLOD) break;
        for(int j = cPos[n][1]; j < cPos[n][1] + cSize; j++){
          for(int k = cPos[n][2]; k < cPos[n][2] + cSize; k++){
            byte sample = voxelData.get(i, j, k);
            // int test = i + j * 1024 + k * 1024 * 1024;
            if(sample != 0){
              value = sample;
            }
            if(sample != first){
              if(first == 0) first = sample;
              value = first;
              leaf = false;
              break;
            }
          }
          if(!leaf) break;
        }
        if(!leaf) break;
      }
      if(leaf) {
        if(cSize == 1){
          int normalX = 0;
          int normalY = 0;
          int normalZ = 0;
          for(int i = cPos[n][0]-1; i <= cPos[n][0]+1; i++){
            if(i < 0 || i >= voxelData.width) continue;
            for(int j = cPos[n][1]-1; j <= cPos[n][1]+1; j++){
              if(j < 0 || j >= voxelData.height) continue;
              for(int k = cPos[n][2]-1; k <= cPos[n][2]+1; k++){
                if(k < 0 || k >= voxelData.depth) continue;
                if(voxelData.get(i, j, k) == 0){
                  normalX += i - cPos[n][0];
                  normalY += j - cPos[n][1];
                  normalZ += k - cPos[n][2];
                }
              }
            }
          }
          normalX = normalX / 2 + 5;
          normalY = normalY / 2 + 5;
          normalZ = normalZ / 2 + 5;
          short packed = (short)(normalX + normalY * 10 + normalZ * 100);
          //System.out.println(normalX + ", " + normalY + ", " + normalZ + " => " + packed);
          children[n] = createLeafNode(value, packed);
        }else{ //TODO: Generalized algorithm for voxels of size N>1 needs work.
          int normalX = 0;
          int normalY = 0;
          int normalZ = 0;
          for(int i = cPos[n][0]-1; i <= cPos[n][0]+cSize; i++){
            if(i < 0 || i >= voxelData.width || i >= cPos[n][0] && i <= cPos[n][0]+cSize-1) continue;
            for(int j = cPos[n][1]-1; j <= cPos[n][1]+cSize; j++){
              if(j < 0 || j >= voxelData.height || j >= cPos[n][1] && j <= cPos[n][1]+cSize-1) continue;
              for(int k = cPos[n][2]-1; k <= cPos[n][2]+cSize; k++){
                if(k < 0 || k >= voxelData.depth || k >= cPos[n][2] && k <= cPos[n][2]+cSize-1) continue;
                if(voxelData.get(i, j, k) == 0){
                  normalX += Math.copySign(1, i-cPos[n][0]);
                  normalY += Math.copySign(1, j-cPos[n][1]);
                  normalZ += Math.copySign(1, k-cPos[n][2]);
                }
              }
            }
          }
          float maxParam = 2*(cSize+2)*(cSize+2); //calculating max value of a single normal parameter
          float fnx = normalX / maxParam;
          float fny = normalY / maxParam;
          float fnz = normalZ / maxParam;
          float fnmax = Math.max(Math.abs(fnx), Math.max(Math.abs(fny), Math.abs(fnz)));
          //instead of dividing by fnmax we can multiply fn by a constant then subtract so fnmax = 1.
          normalX = (int)(fnx/fnmax * 9) / 2 + 5;
          normalY = (int)(fny/fnmax * 9) / 2 + 5;
          normalZ = (int)(fnz/fnmax * 9) / 2 + 5;
          short packed = (short)(normalX + normalY * 10 + normalZ * 100);
          children[n] = createLeafNode(value, packed);
        }
      }
      else children[n] = createNode(value);
      if(leaf) leafMask |= (0x01 << n);
    }
    setChildPointer(parentPointer, children[0]);
    setLeafMask(parentPointer, leafMask);
    for(int n = 0; n < 8; n++){
      if(getValue(children[n]) != 0 && (leafMask & (0x01 << n)) == 0){
        constructOctree(maxSize, curLOD + 1, maxLOD, cPos[n], children[n], voxelData, split);
      }
    }
  }

  usage: 
      // constructOctree(512, 0, maxLOD, startPos, chunk.pointer, voxelData, false);