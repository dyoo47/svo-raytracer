#version 430 core

layout(binding = 3, r8ui) uniform uimage3D voxelImage;
layout(location = 1) uniform int offsetX;
layout(location = 2) uniform int offsetY;
layout(location = 3) uniform int offsetZ;

uint sampleSphere(uvec3 pos){
  int radius = 256;
  int sphereX = 256;
  int sphereY = 256;
  int sphereZ = 256;
  int dist = int(round(sqrt(pow(sphereX - pos.x, 2) + pow(sphereY - pos.y, 2) + pow(sphereZ - pos.z, 2)) - radius));
  if(dist > 0) return 0u;
  return 1u;
}

uint sampleBox(uvec3 pos){
  if(
    pos.x >= 256 && pos.x < 768 &&
    pos.y >= 256 && pos.y < 768 &&
    pos.z >= 256 && pos.z < 768){
    return 1u;
  }
  return 0u;
}

vec4 mod289(vec4 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
  return mod289(((x*34.0)+10.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

vec2 fade(vec2 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise
// https://github.com/stegu/webgl-noise/blob/master/src/classicnoise2D.glsl
float cnoise(vec2 P)
{
  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
  Pi = mod289(Pi); // To avoid truncation effects in permutation
  vec4 ix = Pi.xzxz;
  vec4 iy = Pi.yyww;
  vec4 fx = Pf.xzxz;
  vec4 fy = Pf.yyww;

  vec4 i = permute(permute(ix) + iy);

  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
  vec4 gy = abs(gx) - 0.5 ;
  vec4 tx = floor(gx + 0.5);
  gx = gx - tx;

  vec2 g00 = vec2(gx.x,gy.x);
  vec2 g10 = vec2(gx.y,gy.y);
  vec2 g01 = vec2(gx.z,gy.z);
  vec2 g11 = vec2(gx.w,gy.w);

  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
  g00 *= norm.x;  
  g01 *= norm.y;  
  g10 *= norm.z;  
  g11 *= norm.w;  

  float n00 = dot(g00, vec2(fx.x, fy.x));
  float n10 = dot(g10, vec2(fx.y, fy.y));
  float n01 = dot(g01, vec2(fx.z, fy.z));
  float n11 = dot(g11, vec2(fx.w, fy.w));

  vec2 fade_xy = fade(Pf.xy);
  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
  return 2.3 * n_xy;
}

uint samplePerlinNoise(ivec3 pos){
  float scale = 0.003f;
  if(pos.y * scale > cnoise(vec2(pos.x * scale, pos.z * scale))){
    return 0u;
  }
  return 1u;
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main(void) {
  imageStore(voxelImage, ivec3(gl_GlobalInvocationID.xyz), 
    uvec4(samplePerlinNoise(ivec3(gl_GlobalInvocationID.xyz) + ivec3(offsetX, offsetY, offsetZ)), 0, 0, 0));
}